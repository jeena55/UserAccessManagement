
  

# Access Control

**Access Control**  คือกลไกหรือระบบที่ใช้เพื่อควบคุมการเข้าถึงข้อมูลและทรัพยากรต่างๆ ในระบบปฏิบัติการ Linux โดยระบบ Access Control นี้มีหน้าที่ควบคุมการเข้าถึงแฟ้มข้อมูลและคำสั่งระบบในระดับสิทธิ์ของผู้ใช้และกระบวนการต่างๆ โดยการให้หรือไม่ให้สิทธิ์ในการเข้าถึงและดำเนินการบนไฟล์หรือทรัพยากรต่างๆ

  

## บทบาทหรือหน้าที่บน Linux

บทบาทหรือหน้าที่ของ Access Control บน Linux คือ:

1.  **ควบคุมการเข้าถึงข้อมูล**: Access Control ช่วยให้ผู้ดูแลระบบหรือผู้ใช้งานสามารถกำหนดสิทธิ์และระดับการเข้าถึงข้อมูลได้ ซึ่งทำให้เป็นไปตามหลักการของความปลอดภัยข้อมูลและควบคุมการเข้าถึงโดยละเอียดได้

2.  **ป้องกันการรั่วไหลข้อมูล**: Access Control ช่วยป้องกันการรั่วไหลข้อมูลโดยการห้ามผู้ใช้ที่ไม่มีสิทธิ์เข้าถึงข้อมูลที่อาจเป็นข้อมูลที่เป็นความลับหรือสำคัญ

3.  **ควบคุมการรันคำสั่งระบบ**: ในบางกรณี Access Control สามารถใช้สำหรับควบคุมการรันคำสั่งระบบ โดยทำให้ผู้ใช้ไม่สามารถรันคำสั่งที่อาจเป็นอันตรายหรือเสี่ยงต่อระบบได้

  

## พื้นฐานหรือหลักการทำงาน

  
Access Control บน Linux มีหลักการทำงานดังนี้:

1.  **Permission**: แต่ละไฟล์และทรัพยากรในระบบ Linux มีสิทธิ์ที่กำหนดการเข้าถึงเป็นของผู้ใช้หรือกลุ่มผู้ใช้ สิทธิ์สามารถแบ่งเป็นอ่าน (read), เขียน (write), และรัน (execute) และสามารถกำหนดได้ว่าใครมีสิทธิ์ในการทำแต่ละอย่าง

2.  **User-Based Access Control**: ผู้ใช้งานรายบุคคลมีการกำหนดสิทธิ์ในการเข้าถึงแฟ้มข้อมูลและทรัพยากรต่างๆ โดยอิสระจากผู้ใช้งานอื่น

3.  **Group-Based Access Control**: ผู้ใช้จะถูกจัดกลุ่มและกำหนดสิทธิ์เป็นกลุ่มเดียวกัน ซึ่งทำให้ง่ายต่อการจัดการสิทธิ์แบบกลุ่ม

4.  **Role-Based Access Control (RBAC)**: ระบบ Linux สามารถใช้ RBAC เพื่อกำหนดบทบาทและสิทธิ์ของบทบาทนั้นๆ ในการเข้าถึงแฟ้มข้อมูลและคำสั่งระบบ

  
## Linux File Permissions

การควบคุมการเข้าถึงแฟ้มและทรัพยากรในระบบ Linux เป็นส่วนสำคัญของ Access Control และมีพื้นฐานเกี่ยวกับการกำหนดสิทธิ์แก่ผู้ใช้และกระบวนการต่าง ๆ ดังนี้:

### สิทธิ์ของไฟล์และทรัพยากร

ในระบบ Linux, แฟ้มและทรัพยากรต่าง ๆ มีสิทธิ์ที่กำหนดการเข้าถึงอย่างละเอียด ซึ่งสามารถแบ่งเป็นสิทธิ์ที่สำคัญๆ ได้ดังนี้:

1.  **Read (อ่าน)**: สิทธิ์ในการอ่านข้อมูลในแฟ้มหรือทรัพยากร โดยส่วนใหญ่ใช้สัญลักษณ์ "r".
    
2.  **Write (เขียน)**: สิทธิ์ในการเขียนข้อมูลลงในแฟ้มหรือทรัพยากร โดยส่วนใหญ่ใช้สัญลักษณ์ "w".
    
3.  **Execute (รัน)**: สิทธิ์ในการรันแฟ้มหรือทรัพยากร โดยส่วนใหญ่ใช้สัญลักษณ์ "x".
    

### สิทธิ์ของผู้ใช้และกลุ่ม

สิทธิ์ของแฟ้มและทรัพยากรใน Linux ถูกกำหนดให้กับผู้ใช้และกลุ่ม นี่คือวิธีที่สิทธิ์ถูกแบ่งแยก:

-   **Owner (เจ้าของ)**: ผู้ใช้ที่เป็นเจ้าของแฟ้มหรือทรัพยากรมีสิทธิ์ควบคุมแบบเต็มรูปแบบ เขาสามารถเปลี่ยนแปลงสิทธิ์ อ่าน เขียน และรันไฟล์ได้ โดยใช้คำสั่ง `chmod` หรือ `chown`.
    
-   **Group (กลุ่ม)**: กลุ่มที่กำหนดให้แฟ้มหรือทรัพยากรอยู่มีสิทธิ์เฉพาะกลุ่ม สมาชิกในกลุ่มสามารถเข้าถึงแฟ้มหรือทรัพยากรตามสิทธิ์ที่กำหนด โดยใช้คำสั่ง `chmod` หรือ `chgrp`.
    
-   **Others (ผู้ใช้อื่น ๆ)**: สิทธิ์สำหรับผู้ใช้ที่ไม่ใช่เจ้าของและไม่ได้อยู่ในกลุ่มที่กำหนด สิทธิ์สำหรับกลุ่มนี้อยู่ในส่วน "others" และสามารถเปลี่ยนแปลงได้โดยใช้คำสั่ง `chmod`.

### คำสั่งที่เกี่ยวข้อง:

  

1.  `chmod`: คำสั่งนี้ใช้สำหรับการเปลี่ยนแปลงสิทธิ์ของไฟล์หรือไดเรกทอรี โดยผู้ใช้ต้องระบุสิทธิ์ใหม่ที่ต้องการให้ไฟล์หรือไดเรกทอรีนั้นมี

ตัวอย่างการใช้งาน:

`chmod +x script.sh # เพิ่มสิทธิ์ในการรันสคริปต์`

2.  `chown`: คำสั่งนี้ใช้เปลี่ยนเจ้าของของไฟล์หรือไดเรกทอรีและกลุ่มของไฟล์หรือไดเรกทอรี โดยใช้รูปแบบต่อไปนี้:

`chown [options] ผู้ใช้:กลุ่ม ไฟล์หรือไดเรกทอรี`

  

และตัวอย่างการใช้งาน:

`chown user1:group1 file.txt # เปลี่ยนเจ้าของและกลุ่มของไฟล์`

  

3.`getfacl`: คำสั่งนี้ใช้ดึงข้อมูลสิทธิ์ ACL (Access Control List) สำหรับไฟล์หรือไดเรกทอรีที่มีการกำหนดสิทธิ์แบบขั้นสูง เพื่อควบคุมการเข้าถึงแบบละเอียดอีกมากขึ้น

ตัวอย่างการใช้งาน:

`getfacl file.txt # ดึงข้อมูลสิทธิ์ ACL ของไฟล์`

  

## AppArmor
![enter image description here](https://upload.wikimedia.org/wikipedia/commons/thumb/b/ba/AppArmor_logo.svg/1024px-AppArmor_logo.svg.png)

**AppArmor** เป็นระบบ Access Control ในระบบปฏิบัติการ Linux ที่ช่วยควบคุมการเข้าถึงและการใช้งานของ


### บทบาทหรือหน้าที่บน Linux

  

**AppArmor** มีบทบาทหรือหน้าที่ในระบบ Linux ดังนี้:

  

-  **การกำหนดนโยบายแบบขั้นสูง**: AppArmor ช่วยให้ผู้ดูแลระบบสามารถกำหนดนโยบายการควบคุมการเข้าถึงสำหรับแอปพลิเคชันแต่ละตัว โดยสร้างกฎและข้อกำหนดที่กำหนดว่าแอปพลิเคชันสามารถทำอะไรได้และไม่สามารถทำอะไรได้ในระบบ

  

### พื้นฐานหรือหลักการทำงาน

  

**AppArmor** ทำงานโดยการกำหนดนโยบายการควบคุมการเข้าถึงข้อมูลและทรัพยากรของแอปพลิเคชัน โดยใช้กฎและข้อกำหนดที่ถูกกำหนดเรียบร้อยและนิยามไว้ล่วงหน้า เมื่อแอปพลิเคชันถูกเรียกใช้งาน ระบบ AppArmor จะตรวจสอบว่าการกระทำของแอปพลิเคชันถูกต้องตามนโยบายหรือไม่ และให้สิทธิ์ในการเข้าถึงทรัพยากรตามที่กำหนด

  

### AppArmor-Command

1.  `apparmor_status`: แสดงสถานะของ AppArmor และรายการแอปพลิเคชันที่กำลังทำงานในโหมด AppArmor

2.  `apparmor_parser`: ใช้ในการคอมไพล์และประมวลผลนโยบาย AppArmor เพื่อสร้างกฎและข้อกำหนดในรูปแบบที่สามารถใช้งานได้

3.  `apparmor_util`: เครื่องมือเสริมสำหรับการจัดการกับ AppArmor รวมถึงการสร้างรายงานเกี่ยวกับการใช้งานแอปพลิเคชัน

4.  `aa-complain`: ใช้ในการเปลี่ยนสถานะแอปพลิเคชันให้อยู่ในโหมด "complain" ซึ่งหมายถึง AppArmor จะบันทึกการละเมิดนโยบายแต่ไม่จำกัดการเข้าถึง

5.  `aa-enforce`: ใช้ในการเปลี่ยนสถานะแอปพลิเคชันให้อยู่ในโหมด "enforce" ซึ่งหมายถึง AppArmor จะห้ามการละเมิดนโยบายและป้องกันการเข้าถึงทรัพยากร

6.  `aa-genprof`: เริ่มต้นกระบวนการสร้างนโยบายใหม่สำหรับแอปพลิเคชันที่ไม่มีนโยบาย AppArmor โดยอัตโนมัติ

7.  `aa-logprof`: ใช้ในการวิเคราะห์และดำเนินการกับบันทึกข้อมูลการละเมิดนโยบาย AppArmor เพื่อช่วยในการสร้างนโยบายที่ถูกต้อง

8.  `aa-remove-unknown`: ใช้ในการลบนโยบายที่ไม่รู้จักหรือไม่มีอยู่จากแอปพลิเคชันที่กำหนด

9.  `aa-status`: แสดงสถานะรวมของ AppArmor รวมถึงรายการแอปพลิเคชันที่มีนโยบายและสถานะการใช้งานของแต่ละแอปพลิเคชัน

10.  `aa-unconfined`: แสดงรายการแอปพลิเคชันที่ไม่ถูกควบคุมด้วยนโยบาย AppArmor หรืออยู่ในโหมด "unconfined"ใช้ในการคอมไพล์และประมวลผลนโยบาย AppArmor เพื่อสร้างกฎและข้อกำหนด

## SELinux
  ![enter image description here](https://cloudacademy.com/wp-content/uploads/2015/12/SELinux.jpg)

**SELinux (Security-Enhanced Linux)** เป็นระบบการควบคุมการเข้าถึงและความปลอดภัยบนระบบปฏิบัติการ Linux ที่ใช้นโยบายการควบคุมเข้าถึงแบบที่เข้มงวดเพื่อป้องกันการบุกรุกและความเสี่ยงต่าง ๆ ที่อาจเกิดขึ้น นี่คือสรุปเกี่ยวกับ SELinux:

### บทบาทหรือหน้าที่บน Linux

-  **SELinux** มีบทบาทหลักในการควบคุมการเข้าถึงข้อมูลและทรัพยากรในระบบ Linux โดยใช้นโยบายการควบคุมเข้าถึงที่กำหนดให้แต่ละขั้นตอนของระบบ จะสามารถเข้าถึงทรัพยากรหรือไม่ ขึ้นอยู่กับนโยบายที่กำหนดไว้.

### พื้นฐานหรือหลักการทำงาน

-   **SELinux** ใช้นโยบายการควบคุมเข้าถึง (Access Control Policy) เพื่อกำหนดสิทธิ์และข้อกำหนดเกี่ยวกับทรัพยากรและกระบวนการในระบบ นโยบายเหล่านี้จะระบุว่าแต่ละกระบวนการสามารถเข้าถึงทรัพยากรได้อย่างไร และสิทธิ์ในการทำงานของแต่ละกระบวนการ.
    
-  เมื่อเกิดข้อผิดพลาดหรือการบุกรุก นโยบาย SELinux ช่วยในการบันทึกเหตุการณ์และสร้างรายงานเพื่อให้ผู้ดูแลระบบสามารถตรวจสอบและวิเคราะห์ได้ง่ายขึ้น.
    

### SELinux-Commands

-   1.`sestatus`: คำสั่งนี้ใช้เพื่อแสดงสถานะของ SELinux บนระบบและรายละเอียดเกี่ยวกับนโยบายการควบคุมเข้าถึงที่ใช้งาน.
    
-   2.`getenforce`: ใช้เพื่อแสดงสถานะการทำงานปัจจุบันของ SELinux ว่าอยู่ในโหมด "Enforcing" (เข้มงวด), "Permissive" (อนุญาต) หรือ "Disabled" (ปิดการใช้งาน).
    
-   3.`setenforce`: คำสั่งนี้ใช้เปลี่ยนสถานะการทำงานของ SELinux ระหว่าง Enforcing และ Permissive.
    
-   4.`semanage`: เครื่องมือนี้ใช้ในการจัดการนโยบาย SELinux, เพิ่มหรือลบกฎ, ปรับเปลี่ยนการกำหนดสิทธิ์, และการจัดการรายการควบคุมเข้าถึงอื่น ๆ.

## แหล่งอ้างอิง

  

- [Linux Acess Control - Redhat](https://www.redhat.com/sysadmin/linux-access-control-lists)

- [AppArmor Wiki](https://ubuntu.com/server/docs/security-apparmor)

- [SELinux (ซีลีนุกซ์) คืออะไร](https://alchemist.itbangmod.in.th/selinux-นั้นสำคัญฉไหน-fe845555afbb)

- [Linux file permissions - RedHat](https://www.redhat.com/sysadmin/linux-file-permissions-explained)

